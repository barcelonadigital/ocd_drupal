<?php

/**
 * @file
 * Module file for ohp_task_module.
 */

/**
 * @defgroup ohp_task Example: Page
 * @ingroup examples
 * @{
 * This example demonstrates how a module can display a page at a given URL.
 *
 * It's important to understand how the menu system works in order to
 * implement your own pages. See the Menu Example module for some insight.
 *
 * @see menu_example
 */

/**
 * Implements hook_help().
 *
 * Through hook_help(), a module can make documentation available to the user
 * for the module as a whole or for specific paths. Where the help appears
 * depends on the $path specified.
 *
 * In the first example below, the help text will appear on the simple page
 * defined in hook_menu below in the region designated for help text.
 *
 * In the second example, the text will be available through the module page as
 * a link beside the module or on the admin help page (admin/help) in the list
 * of help topics using the name of the module. To specify help in the admin
 * section use the module name in the path as in the second case below.
 *
 * @see hook_help()
 */
function ohp_task_help($path, $arg) {
  switch ($path) {
    case 'ohp/ohp_task/simple':
      // Help text for the simple page registered for this path.
      return t('This is help text for the simple page.');

    case 'admin/help#ohp_task':
      // Help text for the admin section, using the module name in the path.
      return t("This is help text created in the page example's second case.");
  }
}

/**
 * Implements hook_permission().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function ohp_task_permission() {
  return array(
    'access ohp_task_assigned content' => array(
      'title' => t('Acces tasks assigned'),
      'description' => t('Allow users to access tasks assigned page'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Because hook_menu() registers URL paths for items defined by the function, it
 * is necessary for modules that create pages. Each item can also specify a
 * callback function for a given URL. The menu items returned here provide this
 * information to the menu system.
 *
 * We will define some menus, and their paths will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=ohp/ohp_task/simple,
 * the menu system will first look for a menu item with that path. In this case
 * it will find a match, and execute ohp_task_simple().
 *
 * If the user accesses http://example.com/?q=ohp/ohp_task/arguments,
 * the menu system will find no explicit match, and will fall back to the
 * closest match, 'ohp/ohp_task', executing ohp_task_description().
 *
 * If the user accesses
 * http://example.com/?q=ohp/ohp_task/arguments/1/2, the menu
 * system will first look for ohp/ohp_task/arguments/1/2. Not finding
 * a match, it will look for ohp/ohp_task/arguments/1/%. Again not
 * finding a match, it will look for ohp/ohp_task/arguments/%/2.
 * Yet again not finding a match, it will look for
 * ohp/ohp_task/arguments/%/%. This time it finds a match, and so will
 * execute ohp_task_arguments(1, 2). Since the parameters are passed to
 * the function after the match, the function can do additional checking or
 * make use of them before executing the callback function.
 *
 * @see hook_menu()
 * @see menu_example
 */
function ohp_task_menu() {

  // This is the minimum information you can provide for a menu item. This menu
  // item will be created in the default menu, usually Navigation.
  $items['ohp/ohp_task_assigned'] = array(
    'title' => 'Tasques pendents',
    'page callback' => 'ohp_task_assigned_page',
    'access arguments' => array('access ohp_task_assigned content'),
  );
  $items['ohp/ohp_task_insert'] = array(
    'title' => 'Nova tasca',
    'page callback' => 'ohp_task_insert_page',
    'access arguments' => array('access ohp_task_assigned content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Constructs a descriptive page.
 *
 * Our menu maps this function to the path 'ohp/ohp_task_assigned'.
 */
function ohp_task_insert_page() {
  $id_admission = $_SESSION['admission_bean']->id_admission;
  $id_case      = $_SESSION['case_bean']->id_case;
  if(isset($_GET['id_case']) && isset($_GET['id_activity'])){
    $id_case = $_GET['id_case'];
    $id_activity = $_GET['id_activity'];
    if(!isset($_GET['id_admission'])){
      $id_admission = insert_admission($id_case);
    }
    $id_task = insert_task($id_admission,$id_activity);
    $_SESSION['admission_bean'] = NULL;
    drupal_goto('ohp/ohp_case_main', array('query' => array('id_case' => $id_case)));
  }
}

/**
 * Constructs a descriptive page.
 *
 * Our menu maps this function to the path 'ohp/ohp_task_assigned'.
 */
function ohp_task_assigned_page() {
  $items = array();
  try {
    if(!isset($_SESSION['ohp_token'])){
      drupal_set_message("ERROR: no token found");
      return array();
    }
    $token    = $_SESSION['ohp_token'];
    $client = new SoapClient(null, array('location' => $GLOBALS["WS-ENDPOINT"], 'uri' => ""));
    $result = $client->session_get_user($token);
    if ( $result["ErrorMsg"] ) {
      drupal_set_message($result["ErrorMsg"]);
    } else {
  	  $id_user = $result["user_id"];
   	  $id_type="USR";
   	  $today = getdate();
   	  for ($i=$today['year']; $i<=$today['year']+1; $i++) {
   	    $result = $client->task_calendar_year( $token, $i, $id_type, $id_user);
   	    if ( $result["ErrorMsg"] ) {
   	      drupal_set_message($result["ErrorMsg"]);
        } else {
          if($result["result"]){
   	        $dates_array = explode("#", $result["result"]);
   	        foreach ($dates_array as $date_item) {
   	          $infoDateArray = explode("|", $date_item);
   	          $result = $client->task_list_date( $token, $infoDateArray[0], $id_type, $id_user);
         	  if ( $result["ErrorMsg"] ) {
         	    drupal_set_message($result["ErrorMsg"]);
              } else {
     	        $task_xml = simplexml_load_string($result["result"]);
       	        foreach ($task_xml->task as $task) {
                  // Create tabular rows for our entities.
                  $items[] = array(
                    'data' => array(
                      'id' => $task->date,
                      'item_description' => l($task->description, 'ohp/ohp_case_taskunit', array('query' => array('id_task' => $task->id, 'id_admission' => $task->admission->ref, 'id_case' => $task->case->ref))),
                      'bundle' => $task->case->data->nickname,
                    ),
                  );
       	        }
              }
   	        }
          }
        }
   	  }
    }
  } catch (SoapFault $fault) {
    drupal_set_message("SOAP Fault: (faultcode: {$fault->faultcode}, faultstring: {$fault->faultstring})");
  }
  if (!empty($items)) { //No content in the last week.
    $per_page = 10;
    // Initialize the pager
    $current_page = pager_default_initialize(count($items), $per_page);
    // Split your list into page sized chunks
    $chunks = array_chunk($items, $per_page, TRUE);

    // Create a render array ($page_array) which will be themed as a table with a
    // pager.
    $page_array['pager_table'] = array(
      '#theme' => 'table',
      '#header' => array(t('Data'), t('Tasca'), t('Pacient')),
      '#rows' => $chunks[$current_page],
      '#empty' => t('No hi ha elements per mostrar.'),
    );
    
  }else {
    // There were no tasks. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No hi ha elements per mostrar.'),
    );
    $page_array['table'] = $content;
  }

  return $page_array;
}

/**
 * @} End of "defgroup ohp_task".
 */
